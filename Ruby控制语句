控制语句：
	顺序控制
	条件控制
	循环控制
	异常控制

	if 语句和 while 语句在判断条件时，如果碰到 false 和 nil ，则会认为是”假“，除此之外都认为是”真“

	条件判断：

		1、if 语句

			if 条件判断 [ then ]
				条件成立时执行的处理
			[ [ elsif 条件判断 [ then ]
				条件成立时执行的处理 ]
			else
				条件不成立时执行的处理 ]
			end

			示例1：
				$ vim big_small.rb
					a = 20

					if a >= 10
						puts "bigger"
					else
						puts "smaller"
					end

				➜  ~ ruby big_small.rb
				##  bigger

			示例2：
				$ vim a_or_b.rb
					a = 10
					b = 20

					if a > b
						puts "a 比 b 大"
					elsif a < b
						puts "a 比 b 小"
					else
						puts "a 与 b 相等"
					end

				➜  ~ ruby a_or_b.rb 
				##  a 比 b 小


		2、unless 语句

			unless 条件判断 [ then ]
				条件不成立时执行的处理
			[ else 条件判断 
				条件成立时执行的处理 ] 
			end

			示例：
				$ vim a_or_b.rb
					a = 10
					b = 20
					unless a > b
						puts "a 不比 b 大"
					else

				➜  ~ ruby a_or_b.rb
				##  a 不比 b 大

		3、case 语句

			case 比较对象
			when 值 [ then ]
				处理
			[ when 值 [ then ]
				处理 ]
			else
				处理
			end

			示例1：
				$ vim which_case.rb
					tags = [ "A", "IMG", "PRE" ]
					tags.each do |tagname|

						case tagname
						when "P","A","I","B","BLOCKQUOTE"
							puts "#{tagname} has child."
						when "IMG", "BR"
							puts "#{tagname} has no child."
						else
							puts "#{tagname} cannot be used."
						end

					end

				➜  ~ ruby which_case.rb
				##  A has child.
				##  IMG has no child.
				##  PRE cannot be used.

			示例2：
				$ vim case_class.rb
					array = [ "a", 1, nil ]
					array.each do |item|

						case item
						when String
							puts "#{item} is a String."
						when Numeric
							puts "#{item} is a Numeric."
						else
							puts "#{item} is something."
						end

					end

				➜  ~ ruby case_class.rb
				##  a is a String.
				##  1 is a Numeric.
				##   is something.

		if 修饰符与 unless 修饰符

			puts "a 比 b 大" if a > b

			if a > b
				puts "a 比b 大"
			end







	循环控制：

		实现循环的方法：
			for语句、while语句、until语句
			times方法、each方法、loop方法

		1、for语句

			用法1：
				for 变量 in 开始时的数值..结束时的数值 [ do ]
					希望循环的处理
				end

				示例：
					$ vim sum.rb
						sum = 0

						for i in 1..5 do
							sum += i
						end

						puts sum

					➜  ~ ruby sum.rb        
					##  15

			用法2：
				for 变量 in 对象 [ do ]
					希望循环的处理
				end

				示例：
					$ vim for_names.rb
						names = ["awk", "perl", "python", "ruby"]
						for name in names do
							puts name
						end

					➜  ~ ruby for_names.rb
					##  awk
					##  perl
					##  python
					##  ruby

		2、while语句：

			while 循环条件 [ do ]
				希望循环的处理
			end

			示例1：
				$ vim list_num.rb
					i = 1

					while i <= 10
						puts i
						i += 1
					end

				$ ruby list_num.rb
				##  1
				##  2
				##  3
				##  4
				##  5
				##  6
				##  7
				##  8
				##  9
				##  10

			示例2：
				$ vim while1.rb
					i = 1

					while i < 3
						puts i
						i ++
					end

				$ ruby while1.rb
				##  1
				##  2

			示例3：
				$ vim while2.rb
					i = 1
					sum = 0

					while i <= 5
						sum += i
						i += 1
					end

					puts sum

				$ ruby while2.rb
				##  15

			示例4：
				$ vim while3.rb
					i = 1
					sum = 0

					while sum < 50
						sum += i
						i += 1
					end

					puts i

				$ ruby while3.rb
				##  11

		3、until语句：

			until 条件 [ do ]
				希望循环的处理
			end

			示例1：
				$ vim until.rb
					i = 1
					sum = 1

					until sum > 50
						sum += i
						i += 1
					end

					puts i

				$ ruby until.rb
				##  11





		1、times方法：

				循环次数.times do
					希望循环的处理
				end

			或者

				循环次数.times {
					希望循环的处理
				}

			在times方法的块里，可以获得当前的循环次数

				循环次数.times do |i|
					希望循环的处理
				end

				示例1：
					$ vim ten_hello.rb
						10.times do
							puts "hello world"
						end

					$ ruby ten_hello.rb
					##  hello world
					##  hello world
					##  hello world
					##  hello world
					##  hello world
					##  hello world
					##  hello world
					##  hello world
					##  hello world
					##  hello world

				示例2：
					$ vim puts_times.rb
						5.times do |i|
							puts "第 #{i} 次循环"
						end

					$ ruby puts_times.rb
					##  第 0 次循环
					##  第 1 次循环
					##  第 2 次循环
					##  第 3 次循环
					##  第 4 次循环

		2、each方法
			将对象集合里的对象逐个取出，类似 for 循环

				对象.each do |变量|
					希望循环的处理
				end

			或者

				对象.each do { |变量|
					希望循环的处理
				}

			示例1：
				$ vim each.rb
					sum = 0

					(1..5).each do |i|
						sum += 1
					end

					puts sum

			示例2：
				$ vim each_name.rb
					names = {"awk", "perl", "python", "ruby"}

					names.each { |name|
						puts name
					}

		3、loop方法
			不断执行循环处理

			loop do
				希望循环的处理
			end



	循环控制：

		1、break
			终止程序，跳出循环

			示例：
				i = 0

				["awk", "perl", "python", "ruby"].each do |lang|
					i += 1
				
					if i == 3
						break
					end

					p [i, lang]
				end

		2、next
			跳到跳到下一次循环

			示例：
				i = 0

				["awk", "perl", "python", "ruby"].each do |lang|
					i += 1
				
					if i == 3
						next
					end

					p [i, lang]
				end
				
		3、redo
			在相同的条件下重复刚才的处理

			示例：
				i = 0

				["awk", "perl", "python", "ruby"].each do |lang|
					i += 1
				
					if i == 3
						redo
					end

					p [i, lang]
				end
