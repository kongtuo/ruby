方法

	方法是由对象定义的与该对象相关的操作。在Ruby中，对象的所有操作都被封装成方法。

	一、方法的分类：
		1、实例方法：以对象作为接收者的方法就被称为实例方法
			对象能使用的实例方法是由对象所属的类决定的。调用对象的实例方法后，程序就会执行对象所属类预先定义好的处理。

			示例：
				p "10, 20, 30, 40".split(",") #=> ["10", "20", "30", "40"]
				p [1, 2, 3, 4].index(2) #=> 1
				p 1000.to_s #=> "1000"
				在本例中，从上到下，分别以字符串、数组、数值对象为接收者。

		2、类方法：接收者不是对象而是类本身时的方法
			调用类方法时，可以使用 :: 代替 .。在 Ruby 语法中，两者所代表的意思是一样的。

			示例：
				Array.new # 创建新的数组
				File.open("some_file") # 创建新的文件对象
				Time.now # 创建新的 Time 对象

				File.rename(oldname, newname) # 修改文件名

		3、函数式方法：没有接收者的方法称之为函数式方法
			没有接收者，但并不表示该方法就真的没有可作为接收者的对象，只是在函数式方法这个特殊情况下，可以省略接收者而已

			示例：
				print "hello!" # 在命令行输出字符串
				sleep(10) # 在指定的时间内睡眠，终止程序










	二、方法的定义：
		def 方法名(参数 1, 参数 2, ...)
			希望执行的处理
		end

		参数可以省略
		方法名可由英文字母、数字、下划线组成，但不能以数字开头

		示例：
			$ vim hello_with_name.rb
			#   def hello(name="Ruby")
			#   	puts "Hello, #{name}."
			#   end
			#
			#   hello()
			#   hello("Newbie")

			$ ruby hello_with_name.rb
			#   Hello, Ruby.
			#   Hello, Newbie.

		方法有多个参数时，从参数列表的右边开始依次指定默认值。例如，希望省略三个参数中的两个时，就可以指定右侧两个参数为默认值。
		def func(a, b=1, c=3)
		┊
		end
		请注意只省略左边的参数或者中间的某个参数是不行的。



	1、方法的返回值
		可以用 return 显式指定方法的返回值。
		Ruby 允许没有返回值的方法，且 Ruby 中有很多返回值为 nil 的方法

		示例1：
			$ vim area.rb
			#   def area(x, y, z)
			#   	xy = x * y
			#   	yz = y * z
			#   	zx = z * x
			#   	xy + yz + zx
			#   	(xy + yz + zx) * 2
			#   end
			#
			#   p area(2, 3, 4)

			$ ruby area.rb
			#   52

			默认，方法的最后一个表达式的结果就是方法的返回值

		示例2：
			$ vim area.rb
			#   def area(x, y, z)
			#   	xy = x * y
			#   	yz = y * z
			#   	zx = z * x
			#   	return xy + yz + zx
			#   	(xy + yz + zx) * 2
			#   end
			#
			#   p area(2, 3, 4)

			$ ruby area.rb
			#   26

			return 用于显式指定方法中某表达式的结果作为方法的返回值



	2、定义带块的方法

		调用方法时通过块传进来的处理会在 yield 定义的地方执行，myloop do ~ end 中的代码段将作为 yield 的指令执行
		本例的程序中没有参数，如果 yield 部分有参数，程序就会将其当作块变量传到块里。块里面最后的表达式的值既是块的执行结果，同时也可以作为 yield 的返回值在块的外部使用。

		$ vim myloop.rb
			def myloop
				if block_given?
					while true
						yield
					end
				end
				
				unless block_given?
					puts "asd"
				end
			end
		
			num = 1
		
			myloop do
				puts "num is #{num}"
				break if num > 100
				num *= 2
			end

		> ruby myloop.rb
		num is 1
		num is 2
		num is 4
		num is 8
		num is 16
		num is 32
		num is 64
		num is 128




	3、参数个数不确定的方法
		
		（1）通过用 “* 变量名” 的形式来定义参数个数不确定的方法，Ruby 就可以把所有参数封装为数组，供方法内部使用。

			def foo(*args)
				args
			end

			p foo(1, 2, 3)
		
		（2）至少需要指定一个参数的方法可以像下面这样定义：

			def meth(arg, *agrs)
				[arg, args]
			end

			p meth(1)
			p meth(1, 2, 3)
		
		（3）所有不确定的参数都被作为数组赋值给变量 args。“* 变量名”这种形式的参数，只能在方法定义的参数列表中出现一次。只确定首个和最后一个参数名，并省略中间的参数时，可以像下面这样定义：

			def a(a, *b, c)
				[a, b, c]
			end

			p a(1, 2, 3, 4, 5)
			p a(1, 2)



	4、关键字参数
		使用关键字参数，就可以将参数名与参数值成对地传给方法内部使用；不过，如果把未定义的参数名传给方法，程序就会报错

		（1）“参数名 : 值”这样的形式用来指定参数的默认值
		
			def 方法名（参数1: 参数1的值, 参数2: 参数2的值, …)
				希望执行的处理
			end

			示例：
				def area2(x: 0, y: 0, z: 0)
					xy = x * y
					yz = y * z
					zx = z * x
					(xy + yz + zx ) * 2
				end
	
				p area2(x: 2, y: 3, z: 4)
				p area2(z: 4, y: 3, x: 2)
				p area2(x: 2, z: 3)

		（2）为了避免调用方法时因指定了未定义的参数而报错，我们可以使用“** 变量名”的形式来 接收未定义的参数

			def meth(x: 0, y: 0, z: 0, **args)
				[x, y, z, args]
			end

			p meth(z: 4, y: 3, x: 2) #=> [2, 3, 4, {}]
			p meth(x: 2, z: 3, v: 4, w: 5) #=> [2, 0, 3, {:v=>4, :w=>5}]

		（3）关键字参数与普通参数的搭配使用，a 为必须指定的普通参数，b、c 为关键字参数；调用该方法时，首先指定普通参数，然后是关键字参数。

			def func(a, b: 1, c:2)
			┊
			end
		
			func(1, b: 2, c: 3)




	三、方法的调用：
		对象调用方法，成为方法的接收者

		1、简单的方法调用：
			对象.方法名(参数1, 参数2, 参数3, ..., 参数n)

			调用方法时必须按照定义来指定参数，当没有参数的时候可以省略()

			示例：
				> n = "100".to_i
				#   => 100
				> p n
				#   100
				#   => 100

		2、带块的方法调用
			对象.方法名(参数, ...) do |变量1, 变量2, ...|
				块内容
			end

			对象.方法名(参数, ...) {|变量1, 变量2, ...|
				块内容
			}

			示例：
				$ vim times_with_param.rb
				#   5.times do |i|
				#   	puts "第#{i}次循环"
				#   end

				$ ruby times_with_param.rb
				#   第0次循环
				#   第1次循环
				#   第2次循环
				#   第3次循环
				#   第4次循环

		3、运算符形式的方法调用
			ruby中有些方法看起来像运算符

			示例：
				obj + arg
				obj =~ arg
				-obj
				!obj
				obj[arg]
				obj[arg1] = arg2







	关于方法调用的一些补充

		（1）把数组分解为参数
		将参数传递给方法时，我们也可以先分解数组，然后再将分解后的数组元素作为参数传递给方法。
		在调用方法时，如果以“* 数组”这样的形式指定参数，这时传递给方法的就不是数组本身，而是数组的各元素被按照顺序传递给方法。但需要注意的是，数组的元素个数必须要和方法定义的参数个数一样。

			def foo(a, b, c)
				a + b + c
			end

			p foo(1, 2, 3)

			args1 = [2, 3]
			p foo(1, *args1)

			args2 = [1, 2, 3]
			p foo(*args2)

		（2）把散列作为参数传递

			def foo(arg)
				arg
			end

			p foo({"a"=>1, "b"=>2})

			p foo("a"=>1, "b"=>2)

			p foo(a: 1, b:2)

			args = {a: 1, b:2}
			p foo(args)

		当虽然有多个参数，但只将散列作为最后一个参数传递给方法时，可以使用下面的写法：

			def bar(arg1, arg2)
				[arg1, arg2]
			end

			p bar(100, {"a"=>1, "b"=>2}) #=> [100, {"a"=>1, "b"=>2}]
			p bar(100, "a"=>1, "b"=>2) #=> [100, {"a"=>1, "b"=>2}]
			p bar(100, a: 1, b: 2) #=> [100, {:a=>1, :b=>2}]